@model TaskTracker.Web.Models.TaskFilterViewModel

@{
    ViewData["Title"] = "Browse Tasks";
}

<div class="container mt-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>
            <i class="fas fa-search me-2"></i>Browse & Filter Tasks
        </h2>
        <div>
            <a href="@Url.Action("Index", "Home")" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i>Back to Dashboard
            </a>
        </div>
    </div>

    <!-- Filter Form -->
    <div class="card mb-4">
        <div class="card-header">
            <h5 class="card-title mb-0">
                <i class="fas fa-filter me-2"></i>Filter Tasks
            </h5>
        </div>
        <div class="card-body">
            <form method="get" class="row g-3">
                <div class="col-md-3">
                    <label for="Status" class="form-label">Status</label>
                    <select class="form-select" id="Status" name="Status">
                        @foreach (var statusOption in Model.StatusOptions)
                        {
                            <option value="@statusOption.Value" selected="@(statusOption.Value == ((int?)Model.Status)?.ToString())">
                                @statusOption.Text
                            </option>
                        }
                    </select>
                </div>
                
                <div class="col-md-3">
                    <label for="ProjectId" class="form-label">Project</label>
                    <select class="form-select" id="ProjectId" name="ProjectId">
                        <option value="">All Projects</option>
                        @foreach (var project in Model.Projects)
                        {
                            <option value="@project.Id" selected="@(project.Id == Model.ProjectId)">
                                @project.Name
                            </option>
                        }
                    </select>
                </div>
                
                <div class="col-md-3">
                    <label for="DueDateAfter" class="form-label">Due Date After</label>
                    <input type="date" class="form-control" id="DueDateAfter" name="DueDateAfter" 
                           value="@(Model.DueDateAfter?.ToString("yyyy-MM-dd"))">
                </div>
                
                <div class="col-md-3">
                    <label for="DueDateBefore" class="form-label">Due Date Before</label>
                    <input type="date" class="form-control" id="DueDateBefore" name="DueDateBefore" 
                           value="@(Model.DueDateBefore?.ToString("yyyy-MM-dd"))">
                </div>
                
                <div class="col-12">
                    <div class="d-flex gap-2">
                        <button type="submit" class="btn btn-primary">
                            <i class="fas fa-search me-1"></i>Apply Filters
                        </button>
                        <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                            <i class="fas fa-times me-1"></i>Clear Filters
                        </a>
                    </div>
                </div>
            </form>
        </div>
    </div>

    <!-- Results Summary -->
    <div class="d-flex justify-content-between align-items-center mb-3">
        <div>
            <h5 class="mb-0">Tasks (@Model.TotalCount found)</h5>
            @if (Model.Status.HasValue || Model.ProjectId.HasValue || Model.DueDateAfter.HasValue || Model.DueDateBefore.HasValue)
            {
                <small class="text-muted">
                    Filtered by: 
                    @if (Model.Status.HasValue) { <span class="badge bg-info">@Model.Status.Value</span> }
                    @if (Model.ProjectId.HasValue) { 
                        var project = Model.Projects.FirstOrDefault(p => p.Id == Model.ProjectId);
                        <span class="badge bg-info">Project: @project?.Name</span> 
                    }
                    @if (Model.DueDateAfter.HasValue) { <span class="badge bg-info">After: @Model.DueDateAfter.Value.ToString("MMM dd, yyyy")</span> }
                    @if (Model.DueDateBefore.HasValue) { <span class="badge bg-info">Before: @Model.DueDateBefore.Value.ToString("MMM dd, yyyy")</span> }
                </small>
            }
        </div>
        
        <!-- Page Size Selector -->
        <div class="d-flex align-items-center gap-2">
            <label for="PageSize" class="form-label mb-0">Show:</label>
            <select class="form-select form-select-sm" id="PageSize" name="PageSize" style="width: auto;" 
                    onchange="updatePageSize(this.value)">
                <option value="5" selected="@(Model.PageSize == 5)">5</option>
                <option value="10" selected="@(Model.PageSize == 10)">10</option>
                <option value="25" selected="@(Model.PageSize == 25)">25</option>
                <option value="50" selected="@(Model.PageSize == 50)">50</option>
            </select>
        </div>
    </div>

    <!-- Tasks Table -->
    <div class="card">
        <div class="card-body">
            @if (Model.Tasks.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover table-striped">
                        <thead class="table-light">
                            <tr>
                                <th>Title</th>
                                <th>Project</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Created</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var task in Model.Tasks)
                            {
                                <tr>
                                    <td>
                                        <strong>@task.Title</strong>
                                        @if (!string.IsNullOrEmpty(task.Description))
                                        {
                                            <br>
                                            <small class="text-muted">@task.Description</small>
                                        }
                                    </td>
                                    <td>@task.ProjectName</td>
                                    <td>
                                        <span class="@(task.DueDate < DateTime.Now && task.Status != TaskTracker.Core.Entities.TaskStatus.Completed ? "text-danger fw-bold" : "")">
                                            @task.DueDate.ToString("MMM dd, yyyy")
                                        </span>
                                    </td>
                                    <td>
                                        <span class="badge bg-@(task.Status == TaskTracker.Core.Entities.TaskStatus.Completed ? "success" : task.Status == TaskTracker.Core.Entities.TaskStatus.InProgress ? "primary" : "warning")">
                                            @task.Status
                                        </span>
                                    </td>
                                    <td>
                                        <small class="text-muted">@task.CreatedAt.ToString("MMM dd, yyyy")</small>
                                    </td>
                                    <td>
                                        <div class="btn-group btn-group-sm">
                                            <button type="button" class="btn btn-outline-primary" 
                                                    data-bs-toggle="modal" data-bs-target="#editTaskModal"
                                                    data-task-id="@task.Id"
                                                    data-task-title="@task.Title"
                                                    data-task-description="@task.Description"
                                                    data-task-duedate="@task.DueDate.ToString("yyyy-MM-dd")"
                                                    data-task-status="@task.Status"
                                                    data-task-projectid="@task.ProjectId">
                                                <i class="fas fa-edit"></i>
                                            </button>
                                            <form asp-controller="Tasks" asp-action="Delete" method="post" class="d-inline">
                                                <input type="hidden" name="id" value="@task.Id" />
                                                <button type="submit" class="btn btn-outline-danger" 
                                                        onclick="return confirm('Are you sure you want to delete this task?')">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Tasks pagination">
                        <ul class="pagination justify-content-center">
                            <!-- Previous Page -->
                            <li class="page-item @(Model.PageNumber == 1 ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { 
                                    Status = Model.Status,
                                    DueDateBefore = Model.DueDateBefore,
                                    DueDateAfter = Model.DueDateAfter,
                                    ProjectId = Model.ProjectId,
                                    PageNumber = Model.PageNumber - 1,
                                    PageSize = Model.PageSize
                                })">
                                    <i class="fas fa-chevron-left"></i>
                                </a>
                            </li>

                            <!-- Page Numbers -->
                            @for (int i = 1; i <= Model.TotalPages; i++)
                            {
                                <li class="page-item @(i == Model.PageNumber ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("Index", new { 
                                        Status = Model.Status,
                                        DueDateBefore = Model.DueDateBefore,
                                        DueDateAfter = Model.DueDateAfter,
                                        ProjectId = Model.ProjectId,
                                        PageNumber = i,
                                        PageSize = Model.PageSize
                                    })">@i</a>
                                </li>
                            }

                            <!-- Next Page -->
                            <li class="page-item @(Model.PageNumber == Model.TotalPages ? "disabled" : "")">
                                <a class="page-link" href="@Url.Action("Index", new { 
                                    Status = Model.Status,
                                    DueDateBefore = Model.DueDateBefore,
                                    DueDateAfter = Model.DueDateAfter,
                                    ProjectId = Model.ProjectId,
                                    PageNumber = Model.PageNumber + 1,
                                    PageSize = Model.PageSize
                                })">
                                    <i class="fas fa-chevron-right"></i>
                                </a>
                            </li>
                        </ul>
                    </nav>
                }

                <!-- Pagination Info -->
                <div class="text-center text-muted mt-2">
                    <small>
                        Showing @((Model.PageNumber - 1) * Model.PageSize + 1) to 
                        @Math.Min(Model.PageNumber * Model.PageSize, Model.TotalCount) of 
                        @Model.TotalCount tasks
                    </small>
                </div>
            }
            else
            {
                <div class="text-center py-5">
                    <i class="fas fa-search fa-3x text-muted mb-3"></i>
                    <h5 class="text-muted">No tasks found</h5>
                    <p class="text-muted">Try adjusting your filters or create new tasks.</p>
                    <a href="@Url.Action("Index", "Home")" class="btn btn-primary">
                        <i class="fas fa-plus me-1"></i>Create New Task
                    </a>
                </div>
            }
        </div>
    </div>
</div>

<!-- Edit Task Modal (Reuse from your existing code) -->
<div class="modal fade" id="editTaskModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-edit me-2"></i>Edit Task
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form asp-controller="Tasks" asp-action="Edit" method="post">
                <input type="hidden" id="editTaskId" name="id" />
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="editTaskTitle" class="form-label">Title *</label>
                        <input type="text" class="form-control" id="editTaskTitle" name="title" required
                               placeholder="Enter task title">
                    </div>
                    <div class="mb-3">
                        <label for="editTaskDescription" class="form-label">Description</label>
                        <textarea class="form-control" id="editTaskDescription" name="description" rows="3"
                                  placeholder="Describe your task (optional)"></textarea>
                    </div>
                    <div class="mb-3">
                        <label for="editTaskDueDate" class="form-label">Due Date</label>
                        <input type="date" class="form-control" id="editTaskDueDate" name="dueDate">
                    </div>
                    <div class="mb-3">
                        <label for="editTaskStatus" class="form-label">Status</label>
                        <select class="form-control" id="editTaskStatus" name="status">
                            <option value="Pending">Pending</option>
                            <option value="InProgress">In Progress</option>
                            <option value="Completed">Completed</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editTaskProject" class="form-label">Project *</label>
                        <select class="form-control" id="editTaskProject" name="projectId" required>
                            <option value="">Select a project</option>
                            @foreach (var project in Model.Projects)
                            {
                                <option value="@project.Id">@project.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save me-1"></i>Update Task
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Scripts {
<script>
    // Update page size
    function updatePageSize(pageSize) {
        const url = new URL(window.location.href);
        url.searchParams.set('PageSize', pageSize);
        url.searchParams.set('PageNumber', 1); // Reset to first page
        window.location.href = url.toString();
    }

    // Task Edit Modal Handler
    document.getElementById('editTaskModal').addEventListener('show.bs.modal', function (event) {
        var button = event.relatedTarget;
        var taskId = button.getAttribute('data-task-id');
        var taskTitle = button.getAttribute('data-task-title');
        var taskDescription = button.getAttribute('data-task-description');
        var taskDueDate = button.getAttribute('data-task-duedate');
        var taskStatus = button.getAttribute('data-task-status');
        var taskProjectId = button.getAttribute('data-task-projectid');
        
        document.getElementById('editTaskId').value = taskId;
        document.getElementById('editTaskTitle').value = taskTitle;
        document.getElementById('editTaskDescription').value = taskDescription || '';
        document.getElementById('editTaskDueDate').value = taskDueDate;
        document.getElementById('editTaskStatus').value = taskStatus;
        document.getElementById('editTaskProject').value = taskProjectId;
    });
</script>
}